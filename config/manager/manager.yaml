apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: caas-controller-manager
  name: system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: caas-controller-manager
spec:
  selector:
    matchLabels:
      control-plane: caas-controller-manager
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: caas-controller-manager
    spec:
      securityContext:
        runAsNonRoot: true
        # TODO(user): For common cases that do not require escalating privileges
        # it is recommended to ensure that all your Pods/Containers are restrictive.
        # More info: https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted
        # Please uncomment the following code if your project does NOT have to work on old Kubernetes
        # versions < 1.19 or on vendors versions which do NOT support this field by default (i.e. Openshift < 4.11 ).
        # seccompProfile:
        #   type: RuntimeDefault
      containers:
      - command:
        - /manager
        args:
        - --leader-elect
        - --tls-cert-file=/etc/certs/tls/tls.crt
        - --tls-private-key-file=/etc/certs/tls/tls.key
        image: controller
        name: manager
        securityContext:
          allowPrivilegeEscalation: false
        # TODO(user): uncomment for common cases that do not require escalating privileges
        # capabilities:
        #   drop:
        #     - "ALL"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
          - mountPath: /etc/certs/tls
            name: tls-cert
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
        - name: tls-cert
          secret:
            defaultMode: 420
            secretName: cluster-aas-operator-certs
